<?php
// app/Http/Livewire/Backend/EntidadComponent.php

namespace App\Http\Livewire\Backend;

use App\Models\backend\Entidad;
use Livewire\{Component, WithPagination};

class EntidadComponent extends Component
{
    use WithPagination;

    public $razonSocial;
    public $nombres;
    public $apellidos;
    public $eMail;
    public $tipo = 1;
    public $is_active = 1;

    public $selectedItem; // Variable para almacenar el registro seleccionado

    public $frmFixeModal = 'Fixe'; // Variable para determinar el sistema de formulario fijo=false/modal=true
    public $isModalOpen = false; // Variable para controlar la apertura y cierre de la ventana modal
    public $perPage = 5; // Número de registros por página

    protected $listeners = ['edit', 'OpenModal', 'changePerPage'];

    public function render()
    {
        $entidades = Entidad::paginate($this->perPage);

        return view('livewire.backend.entidad-component', [
            'entidades' => $entidades,
        ]);
    }

    public function store()
    {
        Entidad::create([
            'razonSocial' => $this->razonSocial,
            'nombres' => $this->nombres,
            'apellidos' => $this->apellidos,
            'eMail' => $this->eMail,
            'is_active' => $this->eMail,
            'tipo' => $this->tipo,
        ]);

        $this->resetInputs();
    }

    public function edit($id)
    {
        // dd($id);
        // Método para editar una entidad
        $entidad = Entidad::find($id);
        if ($entidad) {
            // dd($entidad);
            $this->razonSocial = $entidad->razonSocial;
            $this->nombres = $entidad->nombres;
            $this->apellidos = $entidad->apellidos;
            $this->eMail = $entidad->eMail;
            $this->is_active = $entidad->is_active;
            // $this->render();
        } else
            dump('registro no encontrado');
        // $this->render();
        return;
    }

    public function update()
    {
        if ($this->selectedItem) {
            $this->selectedItem->update([
                'razonSocial' => $this->razonSocial,
                'nombres' => $this->nombres,
                'apellidos' => $this->apellidos,
                'eMail' => $this->eMail,
                // Otros campos si los hubiera...
            ]);
        }
        $this->isModalOpen = false; // Agregamos esta línea para cerrar el modal

    }

    public function delete($id)
    {
        $entidad = Entidad::find($id);
        if ($entidad)
            Entidad::destroy($id);
    }

    private function resetInputs()
    {
        $this->razonSocial = null;
        $this->nombres = null;
        $this->apellidos = null;
        $this->eMail = null;
        $this->tipo = 1;
    }

    // Método para cerrar el formulario en la misma lista y limpiar los campos
    public function closeFormInList()
    {
        $this->selectedItem = null;
        $this->resetInputs();
    }

    // Método para abrir el modal y cargar los datos del registro seleccionado en el formulario
    public function openModal($id)
    {
        dd("openModal");
        $entidad = Entidad::find($id);
        if ($entidad) {
            // dd($entidad);
            $this->razonSocial = $entidad->razonSocial;
            $this->nombres = $entidad->nombres;
            $this->apellidos = $entidad->apellidos;
            $this->eMail = $entidad->eMail;
            $this->is_active = $entidad->is_active;
        } else
            dump('registro no encontrado');

        // Otros campos si los hubiera...

        $this->isModalOpen = true;
    }

    // Método para cerrar el modal y limpiar los campos del formulario
    public function closeModal()
    {
        $this->selectedItem = null;
        $this->resetInputs();
        $this->isModalOpen = false;
    }

    // Método para cambiar la cantidad de registros por página
    public function changePerPage($value)
    {
        $this->perPage = $value;
        $this->resetPage(); // Reseteamos la página para evitar problemas de paginación
    }
}
<div>
    <!-- resources/views/livewire/backend/entidad-component.blade.php -->
    <!-- Mostrar el formulario en la misma lista -->
    @if ($frmFixeModal === 'Fixe')
        <!-- ... (código del formulario en la misma lista) -->
        <x-card class="flex flex-wrap justify-between">
            <form wire:submit.prevent="store" class="flex flex-wrap w-full space-x-2 md:space-x-4">
                @csrf
                <x-input wire:model="razonSocial" label="Razón Social" placeholder="nombre de la empresa"
                    class="w-full md:w-min-64" />
                <x-input wire:model="nombres" label="Nombre" placeholder="Nombre(s) de la persona"
                    class="w-full md:w-min-64" />
                <x-input wire:model="apellidos" label="Apellidos" placeholder="Apellido(s)"
                    class="w-full md:w-min-64" />
                <x-input wire:model="eMail" label="eMail" placeholder="nombre@xxx.yyy" />
                <div class="flex flex-col items-center">
                    <label class="text-gray-700 text-sm font-bold mb-2">Activo</label>
                    <x-toggle wire:model.defer="is_active" lg />
                </div>

                <div class="w-full mt-4 md:w-auto">
                    <button type="submit" class="btn btn-primary">
                        Guardar
                    </button>
                </div>
            </form>
        </x-card>
    @elseif ($frmFixeModal === 'Modal')
        <!-- Mostrar el modal -->
        <x-modal blur wire:model.defer="isModalOpen">
            <x-slot name="title">
                Editar Entidad
            </x-slot>

            <x-slot name="content">
                <!-- Formulario de edición -->
                <x-card class="flex flex-wrap justify-between">
                    <form wire:submit.prevent="store" class="flex flex-wrap w-full space-x-2 md:space-x-4">
                        @csrf
                        <x-input wire:model="razonSocial" label="Razón Social" placeholder="nombre de la empresa"
                            class="w-full md:w-min-64" />
                        <x-input wire:model="nombres" label="Nombre" placeholder="Nombre de la persona"
                            class="w-full md:w-min-64" />
                        <x-input wire:model="apellidos" label="Apellidos" placeholder="Apellido de la persona"
                            class="w-full md:w-min-64" />
                        <x-input wire:model="email" email label="eMail" placeholder="nombre@xxx.yyy" />

                    </form>
                </x-card>
            </x-slot>

            <x-slot name="footer">
                <!-- Botones de acción dentro del modal -->
                <button wire:click="closeModal" class="btn btn-secondary">Cerrar</button>
                <button wire:click="update" class="btn btn-primary">Guardar cambios</button>
            </x-slot>
        </x-modal>
    @endif

    <div class="py-2">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    {{-- Incluimos el componente TablaComponent --}}
                    <livewire:components.tabla-component modelo="App\Models\Backend\Entidad" :columnas="[
                        'id' => 'id',
                        'razonSocial' => ['Razon Social'],
                        'nombres' => ['Nombres'],
                        'apellidos' => ['Apellidos'],
                        'eMail' => ['Email'],
                        'is_active' => ['Activo', 'boolean'],
                    ]"
                        :frmFixeModal="$frmFixeModal" :perPage="$perPage" />
                </div>
            </div>
        </div>
    </div>

</div>

<?php
// app/Http/Livewire/Components/TablaComponent.php

namespace App\Http\Livewire\Components;

use Livewire\Component;
use Livewire\WithPagination;

class TablaComponent extends Component
{
    use WithPagination;

    public $modelo; // Variable para almacenar el nombre del modelo a consultar
    public $columnas; // Variable para almacenar las columnas de la tabla
    public $sortBy = 'id'; // Columna por defecto para el ordenamiento
    public $sortDirection = 'asc'; // Sentido del orden por defecto
    public $selectedItem = null; // Variable para almacenar el registro seleccionado
    public $frmFixeModal = null; // Agregamos la propiedad $frmFixeModal
    public $perPage = 5; // Número de registros por página

    protected $listeners = ['changePerPage'];

    public function mount($modelo, $columnas = [], $perPage)
    {
        $this->modelo = $modelo;
        $this->columnas = $columnas;
        $this->perPage = $perPage;
    }

    public function render()
    {
        // Verificamos si el modelo es válido y si tiene las columnas para la tabla
        if (class_exists($this->modelo) && !empty($this->columnas)) {
            $modelo = $this->modelo;
            $columnas = $this->columnas;

            // Consultamos los datos del modelo paginados y ordenados
            $data = $modelo::orderBy($this->sortBy, $this->sortDirection)->paginate($this->perPage);

            return view('livewire.components.tabla-component', compact('data', 'columnas'));
        }

        // Si el modelo o las columnas no son válidas, retornamos una vista de error
        return view('livewire.components.tabla-component-error');
    }

    public function sortBy($column)
    {
        // dump($column);
        // Cambiamos la columna y sentido de ordenamiento
        if ($this->sortBy === $column) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this->sortBy = $column;
            $this->sortDirection = 'asc';
        }
    }

    // Método para manejar el clic en una fila
    public function selectItem($id)
    {
        if ($this->frmFixeModal === "Fixe") {
            // Lógica para abrir el formulario en la misma lista
            // $this->selectedItem = $id;
            // $item = $this->modelo::find($id);
            $this->emit('edit', $id);
        } else {
            $this->emit('openModal', $id);
        }
    }

    // Método para cambiar la cantidad de registros por página
    public function changePerPage($value)
    {
        $this->perPage = $value;
        $this->resetPage(1); // Reseteamos la página para evitar problemas de paginación
        $this->emit('changePerPage', $value);
    }
}

<div class="bg-white shadow-md rounded-md overflow-hidden">
    {{-- views/livewire/components/tabla-component.blade.php --}}
    <table class="table-auto w-full shadow-md">
        <thead>
            <tr>
                @foreach ($columnas as $key => $columna)
                    {{-- @dump($columnas) --}}
                    <th wire:click="sortBy('{{ $key }}')"
                        class="cursor-pointer px-2 py-2 {{ $sortBy === $key ? 'bg-gray-300' : 'bg-gray-100' }}">
                        @if (is_array($columna))
                            {{ $columna[0] }} {{-- Título personalizado --}}
                        @else
                            {{ $columna }} {{-- Título por defecto --}}
                        @endif
                        @if ($sortBy === $key)
                            @if ($sortDirection === 'asc')
                                <x-icon name="arrow-down" class="inline-flex w-4 h-4 pl-2" />
                            @else
                                <x-icon name="arrow-up" class="inline-flex w-4 h-4 pl-2" />
                            @endif
                        @endif

                    </th>
                @endforeach
            </tr>
        </thead>
        <tbody>
            @foreach ($data as $item)
                <tr wire:click="selectItem({{ $item->id }})"
                    class="cursor-pointer {{ $selectedItem === $item->id ? 'bg-gray-200' : '' }}">

                    @foreach ($columnas as $key => $columna)
                        <td class="px-4 py-2">
                            @if (is_array($columna) && count($columna) === 2)
                                @if ($columna[1] === 'boolean')
                                    {{ $item->$key ? 'Sí' : 'No' }}
                                @else
                                    {{ $item->$key }}
                                @endif
                            @else
                                {{ $item->$key }}
                            @endif
                        </td>
                    @endforeach
                </tr>
            @endforeach
        </tbody>
    </table>
    <!-- Contenedor para alinear la lista desplegable al principio y la paginación al final -->
    <div class="inline-flex justify-between w-full px-2">
        <!-- Lista desplegable -->
        <div>
            <x-native-select placeholder="Paginación" :options="['5', '10', '30', '50']" wire:model="perPage" />
        </div>

        <!-- Paginación -->
        <div>
            {{ $data->links() }}
        </div>
    </div>
</div>
